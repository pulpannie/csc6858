## Answers by annie

*Not sure if because not doing lab in VM provided by course,
but needed to modify check-*.sh files and added a make command after the clean part at the beginning
 to make the server run correctly.

Lab 1 Part 1:

Smash Header values. 
in http.c, http_request_header(), value[512] local variable. 
Inside the function, previous stack frame starts at addresss 0x7fff ffff dcd0
current stack frame rbp is stored at 0x7fff ffff dcc0
current stack frame rsp is stored at 0x7fff ffff d880
value[512] array is stored at 0x7fff ffff da90 
so, dcc0 (rbp) - da90 (value array) = 560.

Send header value payload larger than 568 to overwrite return address.
until 560 is the rbp. Next 8 bytes overwrite the return address.

Lab 1 Part 2:

for some reason address of value[512] array moved to 0x7fff ffff da80. 
And the rip at 0x7fff ffff dcb8
But still dcb8 - da80 = 568
So, place shellcode in first part of value array, 
shellcode is 69 bytes so add padding 568 - 69
and for the last 8 bytes overwrite the return address to be the start of the value array.

Lab 1 Part 3:
unlink syscall is stored at 0x1555 5542 6d00
unlink syscall should be placed in 0x7fff ffff dcc0, which is the return address of accidentally
argument to unlink is placed in %rdi by accidentally, by moving %rbp+0x10 into %rdi. 
So we need to send string payload ("/user/annie/grades.txt") into %rbp+0x10.

Lab 1 Part 4:
Vulnerabilities:
1. http_request_header envvar[512]
2. reqpath[4096]

